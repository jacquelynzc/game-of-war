class Card {
  constructor(suit, rank, value) {
    this.suit = suit;
    this.rank = rank;
    this.val = value;
  }
}

class Deck {
  constructor() {
    this.cards = [];
    this.createDeck();
  }

  createDeck() {
    let suits = ["Hearts", "Spades", "Clubs", "Diamonds"];
    let ranks = [
      "Ace",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "10",
      "Jack",
      "Queen",
      "King",
    ];

    for (let i = 0; i < suits.length; i++) {
      for (let j = 0; j < ranks.length; j++) {
        this.cards.push(new Card(suits[i], ranks[j], j + 1));
      }
    }

    this.shuffle();
  }

  shuffle() {
    this.cards = this.cards.sort((a, b) => 0.5 - Math.random());
  }
}

class GameOfWar {
  constructor() {
    this.p1 = [];
    this.p2 = [];
    this.pile = [];
    this.gameInit();
  }

  gameInit() {
    let deck = new Deck();
    this.p1.push(...deck.cards.splice(0, deck.cards.length / 2));
    this.p2.push(...deck.cards);
  }

  startGame() {
    // Set up game logic loop (a player has no more cards)
    let p1Card = this.p1.pop();
    let p2Card = this.p2.pop();

    if (p1Card.val === p2Card.val) {
      console.log("War!!!");
      this.pile.push(p1Card, p2Card)
      this.war()
    } else if (p1Card.val > p2Card.val) {
      this.p1.unshift(p2Card, p1Card, ...this.pile)
      // clear the pile
      console.log("Player 1 Wins!");
    } else {
      console.log("Player 2 Wins!");
      this.p2.unshift(p1Card, p2Card, ...this.pile)
      // clear the pile
    }
  }

  war() {
    // Adjust for edge cases (a player does not have enough cards)
    this.pile.push(...this.p1.splice(0, 3))
    this.pile.push(...this.p2.splice(0, 3))
  }
}

let game = new GameOfWar();
game.startGame();
